{'TMP': 'C:\\Users\\Hun\\AppData\\Local\\Temp', 'COMPUTERNAME': 'DESKTOP-CCIQVMC', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'DESKTOP-CCIQVMC', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 94 Stepping 3, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '5e03', 'SYSTEMROOT': 'C:\\WINDOWS', 'HOME': 'C:\\Users\\Hun', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'TK_LIBRARY': 'C:\\Python27\\tcl\\tk8.5', 'TEMP': 'C:\\Users\\Hun\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'TIX_LIBRARY': 'C:\\Python27\\tcl\\tix8.4.3', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Hun\\AppData\\Local', 'HOMEPATH': '\\Users\\Hun', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-CCIQVMC', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.8.0_144', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Hun', 'LOGONSERVER': '\\\\DESKTOP-CCIQVMC', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'PROGRAMDATA': 'C:\\ProgramData', 'PT6HOME': 'C:\\Program Files (x86)\\Cisco Packet Tracer 6.2sv', 'ONEDRIVE': 'C:\\Users\\Hun\\OneDrive', 'TCL_LIBRARY': 'C:\\Python27\\tcl\\tcl8.5', 'PATH': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\Java\\jdk1.8.0_144\\bin;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\xampp\\mysql\\bin\\;;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Users\\Hun\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Bandizip\\;C:\\Program Files (x86)\\Nmap;C:\\Python27\\lib\\site-packages\\pywin32_system32;C:\\Python27\\lib\\site-packages\\pywin32_system32', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY', 'WINDIR': 'C:\\WINDOWS', 'APPDATA': 'C:\\Users\\Hun\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'OS': 'Windows_NT', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'PROCESSOR_LEVEL': '6', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', '__COMPAT_LAYER': 'RunAsAdmin', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\Hun'}